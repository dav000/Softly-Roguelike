Sea of Green is an open-source, aquatic-themed roguelike being developed in ROT.js.

Ghosting: This week saw huge improvements in the UI and graphical display. I am going for a look similar to that of the old CGA monitors. The color is monochrome blue-green, and I've got a nice "ghosting" effect going on that can be adjusted as per your desires. The ghosting effect is pretty strong and can be a little overwhelming, but that's how it was on those old CGA monitors. I think it looks better than without it, though, because in roguelikes there isn't often much animation from one frame to the next for the player to be able to know what happened on the last turn. All you can see is where everything is NOW, and you have to remember where they were before. With the ghosting effect, you can see the trail of an entity's path through the grid, and thus know exactly the path they took to get there -- at least, for a few seconds.

This is not at the cost of a reduction in responsiveness; if the user presses a key to move before the fading out is finished, the screen updates before continuing to fade. In this way no frames are dropped and the game is still highly responsive, which is something that a game with full animation would have a much harder time achieving, I think, which makes the ghosting effect a happy medium between having animations and static images.

The way I did this was to have a function on an interval that is called every 32 milliseconds (for about 30fps). When that function is called, it checks to see if the game wants the screen to update. If so, it begins the ghosting process. Essentially, the screen is captured, and drawn back on to the canvas a little bit darker than before. Then the new, updated screen is drawn on top of that. Finally, a transparent gradient is applied to give the effect of some screen burn. The alpha levels also seem to blend things together very nicely here. Then of course the alpha of the whole canvas is returned back to 1 (maximum). Glyphs can be drawn juxtaposed on whatever existed in the background, so ghosting can create moments where multiple glyphs exist at different transparency levels, all in the same tile simultaneously (though it will fade in a couple seconds). Edit: I should mention I'm not exactly sure why my method works, because it took me 5 hours of shots in the dark to come up with something that looked good. I don't understand it well at all but if anyone wants to see the source code, it is here. And if you want to see the (very far from complete) game in action so far, you can see here (EDIT: there is a problem with clicking the link; once you open the link, please refresh the page to get the display to work properly, and hopefully there should be no problems...). Although there is nothing to do except move around, see the ghosting effect, and fight a couple of monsters. (hjklyubn to move, f to aim speargun).

You know, a video would be much better than describing this all in text, but I don't know of any good screen capture programs nor where to upload them... maybe someone could help me figure this out? If not it's no big deal.

Aiming: Being an aquatic-themed RL, we need to have harpoon guns and spearguns and the like, so an aiming script is necessary. I decided to come up with my own aiming script, which I described in the last Sharing Saturday. The actual shooting part is now working, using an implementation of the Bresenham line algorithm. Each tile in the returned list is iterated over in order from the shooter to the target, and if something in the way is detected, the shot will hit that thing instead of the intended target. In the UI this is denoted by a line drawn from point A to B, formed currently of asterisks (*) as I was too lazy to code it to draw slashes and dashes (like NetHack)... If something (monster, wall) is in the way it will be drawn with a "!" and the line will stop at that point to indicate this. This all works very well so far and I'm happy with it.

I need to start working on world generation and more gameplay elements, to start turning this into a working game instead of spending so much time on little details like I ALWAYS do.....

	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sea of Green is an open-source, aquatic-themed roguelike being developed in ROT.js. This week I made some good progress.

A few things I have been working on are as follows:

side-view perspective; gravity while outside the water. This is currently undergoing some potentially major changes as, funnily enough, right now you will fall faster if you have a higher speed because falling is tied in with movement.

"air pockets" can exist underwater. Creatures can breathe in the air pocket to restore their Oxygen, and if the pocket is big enough, it changes movement mechanics. You can't swim in (or climb) air. I think eventually I want to have some simple, dynamic water physics. I think water might work a little bit like in Minecraft, with source blocks. I'm not sure about this yet; I might not even have destructible terrain for this simpler game.

A custom aiming script for targeting enemies. I am proud of my solution to this problem. Essentially the player presses the aim key, and then the script makes a list of each enemy in range. Then the player selects a direction to aim in, and the monsters that are within 30 degrees of the selected direction are put into a separate list. Then that list is ordered by proximity to the player. Finally, the closest target is selected first, but the other targets are committed to memory. If the player presses that same direction key again, the next closest target in the given direction is selected. Choosing another direction makes a new list of monsters and picks the first one from that list, and the player can cycle through that new list by continuing to press the same directional key.

I have been playing around a lot with the idea of using HTML tags to present HUD information to the player. It looks a little jarring, with the font being different for the HUD as compared to the game window. However, I like the idea of the actual "console" area being used to display the actual game, while additional info that may be needed is accessible in the margins. I want the game to be simple enough that it is totally possible for pros to play the game without really needing to look at the HUD very often. Over-reliance on the log to give info to the player bogs things down a lot.

	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
I put work on Softly Into the Night on hold for a while as it has become quite overwhelming. By its nature it is a large and ambitious project that will take a very long time to complete. In the mean time I want to build some other things and branch out my future career options like web development. In order to learn Javascript, I began a new roguelike I am developing with ROT.js as an open-source project.

The new game is inspired by a poster on these forums who wanted to make an "aquatic" roguelike. It is also lightly inspired by u/0nce who posted his 7DRL entry, Abyss. This too is a side-view perspective game, and it will take place in a vast and deep sea. The player has limited oxygen and must reach the bottom.

Many of the more complex things from Softly Into the Night will be dealt with far more quickly for this simple game, and I have come up with a couple of (what, so far, seem like) elegant solutions. For instance, since the page runs in the browser using Javascript, I decided to include some HTML elements around the ROT.js display canvas, which display information from the game like the HUD and message log. I think it looks pretty good so far.

This use of HTML elements allows me to spend more time focusing on other features of the game, since effectively the HUD and log are already programmed for me. I am going to see how much I can do with this, like having lots of buttons and control available without even interacting with the game canvas where the ASCII symbols are drawn. Eventually the menus should be accessible in the "console," too; for now, though, I am not going to bother with this. In Softly Into the Night, I spent a lot of time building my own interface which is still very far from complete. In the nature of this side-project being much simpler, I think the use of HTML elements is a good idea, unless it springs up some issues later on.

Maybe next week I will have something to show for this new game, but for now it's a little like a super-simple diving simulator where there is nothing to do but be in the ocean (and, fight "c"s I guess?). I suppose I haven't made much progress in the 5 or 6 days I've been working on it (considering how much people can accomplish with 7DRLs!). BUT... 5 or 6 days ago, I didn't know Javascript at all! Now I am pretty comfortable with at least most of the basics of the language. I am also learning ECMAScript 6, which I can already tell can improve JS quite a bit; a lot of my code has already been converted to ES6.

So far for this small project, although there have been challenges as always, ROT.js with Javascript seems to be fitting the bill. It is interesting working with different languages and being able to do certain things in easier ways, while certain other things are much harder in this particular language (at my skill level). The restraints force us into being more creative...

	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	